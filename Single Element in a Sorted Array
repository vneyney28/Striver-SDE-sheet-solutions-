class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        if (nums.size() < 2)return nums[0];
        //boundary checks
        if (nums[0] != nums[1])return nums[0];
        if (nums[nums.size() - 1] != nums[nums.size() - 2])return nums[nums.size() - 1];

        int low = 0, high = nums.size() - 1, mid;

        while (low < high) {
            mid = (low + high) / 2;
            if (nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1])return nums[mid];
            if ((mid & 1 && nums[mid] == nums[mid + 1]) || (!(mid & 1) && nums[mid] == nums[mid - 1]))high = mid - 1;
            else low = mid + 1;
        }
        return nums[low];
    }
};
